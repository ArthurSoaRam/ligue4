#[derive(Clone, Copy, PartialEq)]
enum Espa√ßoTabuleiro {
    Vazio,
    Jogador1,
    Jogador2,
}

impl Espa√ßoTabuleiro {
    fn to_char(&self) -> char {
        match self {
            Espa√ßoTabuleiro::Vazio => '‚ö´',
            Espa√ßoTabuleiro::Jogador1 => 'üîµ',
            Espa√ßoTabuleiro::Jogador2 => 'üî¥',
        }
    }
}

struct Jogo {
    // tabuleiro com 6 linhas e 7 colunas, come√ßando da ponta superior esquerda
    tabuleiro: [[Espa√ßoTabuleiro; 6]; 7],
    vez_de: Espa√ßoTabuleiro,
}

impl Jogo {
    // cria um novo jogo
    fn novo() -> Self {
        Self {
            tabuleiro: [[Espa√ßoTabuleiro::Vazio; 6]; 7],
            vez_de: Espa√ßoTabuleiro::Jogador1,
        }
    }

    fn print_tabuleiro(&self) {
        println!("===============");

        for i in 0..6 {
            for j in 0..7 {
                print!("{}", self.tabuleiro[j][i].to_char());
            }
            println!();
        }
        println!("\nVez de: {}", self.vez_de.to_char());
    }

    // tenta adicionar uma pe√ßa na ao tebuleiro na posi√ß√£o recebida e troca a vez do jogador. retorna se conseguiu ou n√£o
    fn adicionar_pe√ßa(&mut self, posi√ß√£o: usize) -> bool {
        if posi√ß√£o >=0 && posi√ß√£o < 7 {
            for i in (0..6).rev() {
                if self.tabuleiro[posi√ß√£o][i] == Espa√ßoTabuleiro::Vazio {
                    // adicionando a pe√ßa ao tabuleiro
                    self.tabuleiro[posi√ß√£o][i] = self.vez_de;

                    // trocando a vez para o outro jogador
                    if self.vez_de == Espa√ßoTabuleiro::Jogador1 { self.vez_de = Espa√ßoTabuleiro::Jogador2 }
                    else { self.vez_de = Espa√ßoTabuleiro::Jogador1 }

                    return true;
                }
            }
        }
        false
    }

    fn jogar(&mut self) {
        todo!()
    }
}

fn main() {
    let mut jogo = Jogo::novo();
    
    jogo.print_tabuleiro();
    println!("{}", jogo.adicionar_pe√ßa(0));
    jogo.print_tabuleiro();
    println!("{}", jogo.adicionar_pe√ßa(0));
    jogo.print_tabuleiro();
}
